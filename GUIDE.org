#+TITLE: Program Guide
#+AUTHOR: J. Greg Davidson
#+DATE: Circa 2021
#+OPTIONS: num:nil

Our intention is for you to explore each leading example /before/ you read any
of the following commentary.
- Read it, compile it, run it, try some experiments!
- /Then/ read the commentary
- What questions remain?  Write them down!

In some cases we ask questions in the commentary and suggest exercises.

All of this is under a github repository.  Feel free to
- Post issues
- Clone this repository
- Improve things
- Submit pull requests!

Learners know more about what helps learners than experts will ever know!

* Progressive Examples

These examples are designed to acquaint you with C fundamentals with a minimum
of friction.

After you've seen a C language or library feature in our examples, if you want
to know more you can do a web search on, e.g.
- c for statement
- c puts function

Much of the quality C reference materials won't make much sense until /after/
you've finished this tutorial. Many features only make sense to experts, e.g.
library developers. Don't Panic! You don't need to know everything to use C
effectively!

If you already know some C or similar languages, pretend you don't - you'll
learn more if you cultivate /beginner's mind/!

** [[file:Programs/hello1.c][hello1.c]]
- [[file:Programs/hello1+comments.c][hello1+comments.c]]
The traditional first C Program!
** [[file:Programs/hello2.c][hello2.c]]
- [[file:Programs/hello2+comments.c][hello2+comments.c]]
The same program with each /lexical token/ (like words in a
human language) on a separate line. The compiler doesn't care!
** [[file:Programs/hello3.c][hello3.c]]
Only required whitespace used. Not advisable! Some machine-generated C code
looks like this. There are programs which will clean up undesirable layout in C
and other languages. The golden rule is to be consistent with the layout which
your colleagues use.
** [[file:Programs/putchar.c][putchar.c]]
~putchar~ is very fast, but maybe inconvenient when you have more than a few
characters to output! Alternatively, the ~puts~ function can output a whole
/string/ of characters and automatically adds a newline ~\n~ at the end.
** [[file:Programs/squares1.c][squares1.c]]
In /Modern C/ functions should be /declared/ before they are /called/. One way
is to make sure that their full /definitions/ preceed their use.

The ~printf~ function can print multiple arguments in diverse formats controlled
by its first argument, a /format string/. This makes ~printf~ very convenient,
but it's less efficient than ~puts~ or ~putchar~.
** [[file:Programs/squares2.c][squares2.c]]
Another way to /declare/ a function is with a /function prototype/, consisting
of only the /head/ of the function followed by a semicolon. This allows the
function /definitions/ to be given in any order or even to be linked in from
libraries or other modules.

The /one definition rule/ says that you can have *one* /definition/ of any
entity, e.g. of any /function/, /variable/ or /type/ but you can have as many
/declarations/ as convenient. The C compiler will check that all declarations
and the definition are consistent. C compilers process each program file
sequentially. A C programmer should ensure that any entity is declared before it
is used, i.e. earlier in the source, either in the same file or in an included
/header file/.

/Header Files/, including /Standard Header Files/ such as <stdio.h> contain
/function prototypes/ of /Libraries/ which can either be copied into your
program's executable file with a /linker/ (static linking) or at the time your
program is run (dynamic linking). By default, the command which invokes the C
Compiler will also run a linker to resolve anything declared and used but not
defined in your program. Other than this mention, this tutorial does not cover
linker features as they are different on different C development platforms.
** [[file:Programs/greet1.c][greet1.c]]
See [[file:Programs/greet1-diagram.txt][greet1-diagram.txt]]

The datatype ~char *~ only promises to point to a single character
- There's no implication that any additional characters are adjacent.

We can create a new datatype ~Strptr~ which will represent our conventions that
- Strings of Characters are represented by
  - a pointer to the first character and 
  - a NUL byte at the end of the String.

see  [[file:Programs/greet2.c][greet2.c]]

If we document this convention and use it consistently, it will help us keep
straight what we're doing. Alas, C will not actually understand our convention,
the ~typedef~ simply makes ~Strptr~ an alias for ~char *~.
** [[file:Programs/greet3.c][greet3.c]]
A /C/ /Array/ is a fixed-length sequence of elements of the same type which are
stored adjacent in memory.

String literals in "double quotes" are anonymous arrays just large enough to
store the specified characters along with a final '\0'.

The more general method for creating a fixed-length array is to use square
brackets enclosing the desired [array length] inside. Later we'll find out that
the same square brackets can for [indexing] arrays.

It's considered a good idea to centralize and documnent any arbitrary global
values, e.g. array sizes, path names, etc. C has a very general mechanism which
can be used for such things: /The C Pre-processor/.

Before any syntactic or semantic processing is done on a C Program, the C
Preprocessor is run to handle all of the weird requests which start with a # at
the beginning of a line.  These requests can change the source code in very open-ended ways.

The #include request literally inserts the contents of another file into the current code.

The ~#define~ request introduces a /macro/ along with a /substitution/. A very
simple use of ~#define~ is to centralize those pesky global literals. In this
case any occurrence of ~STR_SIZE~ will be replaced with ~30~ in the rest of the
code before any further processing is done, just as if you'd done it with a
manual edit.

*** Exercise: Draw a diagram showing the memory layout of this program
** [[file:Programs/greet4a.c][greet4a.c]]
The ~sizeof~ operator is computed at /compile time/, i.e. before your program is run.
It lets you find out how many bytes of storage will be allocated to store a
variable. By definition, ~sizeof (char)~ is always ~1~.
** [[file:Programs/greet4b.c][greet4b.c]]
** [[file:Programs/greet5a.c][greet5a.c]]
The elements of the array ~presidents~ are pointers, which typically occuply one
machine word of storage. In the C world, a machine word is typically 2 to 8
bytes and is in general unknowable. ~sizeof presidents~ gives you the number of bytes in the whole array, whereas ~sizeof presidents[0]~ gives you the number of bytes in the first element.  By definition, all elements of an array are of the same size.  Does the division make sense now?

The standard function ~strlen~ is declared in the header file <string.h>. Given
a pointer to the beginning of an array of characters, it will iterate the
pointer until it finds the '\0' at the end of the string, counting as it goes.
Bad things will happen if you pass it a ~char *~ which does /not/ point to a
'\0'-terminated string!

Variables, such as ~i~ which are defined inside of a block are local to that
block. Their storage is allocated when execution enters that block and
deallocated when it leaves. The identifier (name) is only usable inside the
/scope/ of that block. Any identifier of the same name defined in a different
scope refers to a different entity.

In C, a /declaration/ such as the typedef on line 4 and the /function prototype/
on line 8 merely describes something, and can be repeated, e.g. in multiple
include files without causing an error.

A /definition/ both /declares/ and /creates/ something. C has the /one
defintion rule/ which says that you may only /define/ something once, even if
the definitions are identical.

A variable /definition/ allocates storage when the variable is in scope. A
function /defintion/ allocates code for the function body, i.e. the outer block
of the function.

Boolean conditions in /control structures/ must be (enclosed in parentheses).
The /body/ of a control structure is considered to be a single statement.  You
can use a {block; statement;} when you want to control multiple statements.
** [[file:Programs/greet5b.c][greet5b.c]]
~i++~ increments ~i~ just like ~i = i + 1~ does.  It's just an abbreviation but it has a couple more tricks which we'll learn later.

Notice the four parts of the ~for~ statement. It does the same thing as the code
in the previous example. The difference is style. When an initialization,
control and update are strongly related, a ~for~ statement puts them together
nicely. Otherwise, you should prefer the bulkier code with a ~while~ statement.
** [[file:Programs/greet5c.c][greet5c.c]]
Note that ~#define~ /macros/ can take parameters! No syntax or type checking is
done on the subsittutions. In this example, ~ARRAY_SIZE~ simply expands to a
compile-time expression so there's no runtime overhead!
*** Question:
 What will ~ARRAY_SIZE~ compute if you try using it on a '\0'-terminated string
instead of on a fixed-length array?
** [[file:Programs/greet5d.c][greet5d.c]]
As we get increasingly abstract, see if you can follow the expansion of the macros!

Most C compilers have a flag which has them only do pre-processing. You can use
that to learn what's your program becomes after all of the substitutions!
** [[file:Programs/greet5e.c][greet5e.c]]
** [[file:Programs/greet5f.c][greet5f.c]]
** [[file:Programs/ops_num.c][ops_num.c]]
** [[file:Programs/if1.c][if1.c]]
** [[file:Programs/if2.c][if2.c]]
** [[file:Programs/if3.c][if3.c]]
** [[file:Programs/if4.c][if4.c]]
** [[file:Programs/if5.c][if5.c]]
~enum~ is syntactic sugar for a mnemonic set of integers. Many programmers use a
series of ~#define~ requests instead, inspired by ancient code bases written before ~enum~ was added to the language.

The ~enum~ notation is more compact and the compiler does proper syntactic and
semantic checking on your ~enum~ code. You should prefer using ~enum~ to using
~#define~ for integer constants /except/ for when you're using ~#define~ values
to control the preprocessor, and advanced technique we may cover later!
** [[file:Programs/switch1.c][switch1.c]]
~switch~ can be syntactically nicer than nested ~if~ statements. It has some
limitations. It used to be faster than nested ~if~ statements. Modern compilers
generally produce the same code for nested ~if~ statements as they do for a
~switch~. Watch out, though: After the ~switch~ trnasfers control to a statement
labeled with a matching ~case~, the execution of the block will continue as it
normally would, unless something like a ~return~ or a ~break~ takes you out!
** [[file:Programs/switch2.c][switch2.c]]
*** When is the ~WHEN~ macro making a difference is this example?
** [[file:Programs/types.c][types.c]]
** [[file:Programs/types2.c][types2.c]]
** [[file:Programs/struct1.c][struct1.c]]
See [[file:Programs/struct1-diagram.txt][struct1-diagram.txt]]
** [[file:Programs/struct2.c][struct2.c]]
*** Challenge: Diagram what memory looks like!
** [[file:Programs/struct3.c][struct3.c]]
*** What are the /macros/ doing here?
*** What does memory look like?
** [[file:Programs/struct4.c][struct4.c]]
*** How can we achieve similar benefits without /macros/?
How could we achive economy of expression and reliability without macros?

Or with fewer macros?

Evaluate your proposed alternative designs against one another and against
alternatives from other sources.
** [[file:Programs/employee1.h][employee1.h]]
It's very common to want to share code among multiple programs and/or multiple
modules of a large complex program. Sharable C code Files which contain no
/definitions/ are usually given the extension ~.h~. What's special about such
files, i.e., why should they only contain declarations, not defintions?
** [[file:Programs/struct5.c][struct5.c]]
** [[file:Programs/array1.h][array1.h]]
These /macros/ can be used more generally than the ones we've seen before, so
it's nice to have them by themselves in an include file.
** [[file:Programs/array2.h][array2.h]]
A very useful feature of the C Preprocessor is conditional expansion, which can allow unwanted or unneded code to simply disappear.

Conditional preprocessor expansion is often used to bring in variations of code
that is only suitable for particular situations or environments, e.g. those
using particular operating systems, network services, hardware.

In this example, we're using what is now a common technique: ensuring that
declarations using ~#include~ are only brought into a compilation once. This can
be tricky as /include files/ often include /other include files/ and this can
geneate loops which would otherwise try to generate programs of infinite size!

You'll see this technique used in all standard header files, e.g. <stdio.h>,
<string.h>, etc. and you should always use it in the header files you write!
** [[file:Programs/employee2.h][employee2.h]]
** [[file:Programs/struct6.c][struct6.c]]
** [[file:Programs/args.c][args.c]]
You should run this program from the command line so that you can supply it with different arguments.

*** Exercise challenge: How are command line arguments passed to main?
Look carefully at how the arguments are being processed.  How must they be arranged in memory for this to work?

*** Exercise challenge: How are ~i++~ and ~++i~ related?

Consider this block of code:
#+begin_src C
  int i1 = 0, j1 = 0;
  int i2 = i1++, j2 = ++j1;
  printf("i1 = %d, j1 = %d, i2 = %d, j2 = %d\n", i1, i2, i3, i4);
#+end_src
- What do you expect the output to be?
- Put it in a test program and see if you're right?
- What's a simple explanation?
- When might this be useful?
- What if you use -- instead of ++?

** [[file:Programs/dates.c][dates.c]]
The ~scanf~ function is very handy for reading test data, but should /NOT/ be
used in production code. If the input format differs from the ~scanf~ format
string, ~scanf~ will tell you, but resynchrnizing with the intput stream is in
general impossible.

Production code should generally read interactive input as strings and then do
any parsing carefully. Sometimes ~sscanf~ will do what you need, but don't be
surprised if it is insufficient. Dealing well with input from uncontrolled
sources, e.g. from humans, is a /hard problem/!
** [[file:Programs/putint1.c][putint1.c]]
** [[file:Programs/putint2.c][putint2.c]]
*** Exercise challenge:
Change PutInt so that it prints large integers with commas to group the digits
  - groups can have up to 3 digits
  - or the convention used in your country
Hints:
- Add a new parameter to PutPosInt which tracks your position
- PutInt should pass a 0 to initialize the new parameter
- Be /Maximally Lazy/: each call to PutPosInt should
  - either print a single digit
  - or a single comma 
  - or print nothing!
** [[file:Programs/getline1.c][getline1.c]]
A more common but maybe less clear version:
 [[file:Programs/getline.c][getline.c]]
*** Exercise challenges:
1. Redesign so that the caller can specify a limit to how much space will be
   allowed for the the size of the dynamically allocated array
  - What should happen if the line is too long?

3. Redesign so that instead of each instance of getline holding on to only 1
   input character until it's time to put it into the final array, it instead
   has a small fixed-size array which can hold several characters.
   - The new getline should only delegate to a new getline if and when its small
     array is full and more characters remain in the input line.
   - All input characters need to placed into the final dynamically allocated
     array as before.
